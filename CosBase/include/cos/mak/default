#
# o---------------------------------------------------------------------o
# |
# | COS makefile -- default
# |
# o---------------------------------------------------------------------o
# |
# | C Object System
# |
# | Copyright (c) 2007+ Laurent Deniau, laurent.deniau@cern.ch
# |
# | For more information, see:
# | http://cern.ch/laurent.deniau/cos.html
# |
# o---------------------------------------------------------------------o
# |
# | This file is part of the C Object System framework.
# |
# | The C Object System is free software; you can redistribute it and/or
# | modify it under the terms of the GNU Lesser General Public License
# | as published by the Free Software Foundation; either version 3 of
# | the License, or (at your option) any later version.
# |
# | The C Object System is distributed in the hope that it will be
# | useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# | of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# |
# | See <http://www.gnu.org/licenses> for more details.
# |
# o---------------------------------------------------------------------o
# |
# | $Id: default,v 1.13 2008/12/12 16:56:45 ldeniau Exp $
# |
#

#
# default settings
#
COSSYM  := cossym
COSGEN  := cosgen
COSCMT  := coscmt

PRJTYPE := $(if $(program),program,$(if $(library),library))

VERSION := $(if $(version),$(version),0.0)
RELEASE := $(if $(release),$(release),$(shell date +'%Y%m'))
PACKAGE := $(if $(package),$(package),$($(PRJTYPE))$(if $(version),-$(version))_$(RELEASE))

LNKTYPE := $(filter static shared,$(targets))
LNKTYPE := $(if $(LNKTYPE),$(LNKTYPE),$(LIBTYPE))

TARGETS := $(filter debug profile release,$(targets))
TARGETS := $(if $(TARGETS),$(TARGETS),debug profile release)

BINDIR  := $(DESTDIR)/$(OSNAME)/bin
LIBDIR  := $(DESTDIR)/$(OSNAME)/lib
OBJDIR   = $(DESTDIR)/$(OSNAME)/obj/$(TARGET)
TMPDIR  := $(DESTDIR)/$(OSNAME)/tmp/$(TARGET)

ifneq ($(wildcard $(BASEDIR)/include),)
INCDIR  := $(BASEDIR)/include
SRCDIR  := $(BASEDIR)/src
else ifneq ($(wildcard $(BASEDIR)/src),)
INCDIR  := $(BASEDIR)/src
SRCDIR  := $(BASEDIR)/src
else
INCDIR  := $(BASEDIR)
SRCDIR  := $(BASEDIR)
endif

HEADERS := $(wildcard $(if $(headers),$(abspath $(headers)),$(SRCDIR)/*.h \
             $(if $(wildcard $(BASEDIR)/include),$(INCDIR)/*.h $(INCDIR)/*/*.h \
             $(INCDIR)/*/*/*.h $(INCDIR)/*/*/*/*.h $(INCDIR)/*/*/*/*/*.h)))

SOURCES := $(wildcard $(if $(sources),$(abspath $(sources)),$(SRCDIR)/*.c))

ifneq ($(defgens),no)
GENERIC := $(filter-out $(PREFIX)/include/cos/cos/%.h \
                        $(PREFIX)/include/cos/cpp/%.h, \
             $(if $(defgens),$(wildcard $(abspath $(defgens))),$(HEADERS)))
GENERIC := $(if $(GENERIC),$(shell $(GREP) -F -l defgeneric $(GENERIC)))
endif

OBJECTS  = $(addprefix $(OBJDIR)/, \
             $(addsuffix .o,$(basename $(notdir $(SOURCES)))) \
             $(if $(GENERIC),$($(PRJTYPE))_$(COSGEN).o))

DEPENDS  = $(patsubst %.o,%.d,$(OBJECTS))

MODINCS  = $(wildcard \
             $(foreach d, $(abspath $(moddirs) $(BASEDIR) $(BASEDIR)/.. $(BASEDIR)/../..), \
               $(foreach m, $(moddeps),$(d)/$(m))))
             
MODLIBS  = $(wildcard \
             $(foreach d, $(abspath $(moddirs) $(DESTDIR) $(DESTDIR)/.. $(DESTDIR)/../..), \
               $(foreach m, $(moddeps),$(d)/$(m))))

MODBINS  = $(wildcard \
             $(foreach d, $(abspath $(moddirs) $(DESTDIR) $(DESTDIR)/.. $(DESTDIR)/../..), \
               $(foreach m, $(moddeps),$(d)/$(m))))

MODS    := $(addprefix --dep=, $(moddeps))

LIBS     = $(addprefix -l, \
             $(addsuffix $(TARGETEXT),$(moddeps)) $(libdeps))

INCLUDE  = $(addprefix -I, $(INCDIR) \
             $(addsuffix /include,$(MODINCS)) \
	           $(wildcard $(abspath $(incdirs))) \
             $(wildcard $(PREFIX)/include))

LIBRARY  = $(addprefix -L, \
             $(addsuffix /$(OSNAME)/lib,$(MODLIBS)) \
	           $(wildcard $(abspath $(libdirs))) \
             $(wildcard $(PREFIX)/lib))

BINARY   =   $(addsuffix /$(OSNAME)/bin,$(MODBINS)) \
             $(wildcard $(abspath $(bindirs)))

INSTALL  = $(subst $(BASEDIR)/,, \
           $(subst $(DESTDIR)/$(OSNAME)/,, \
             $(shell $(FIND) $(BASEDIR)/share/doc $(BASEDIR)/include \
                             $(DESTDIR)/$(OSNAME)/bin $(DESTDIR)/$(OSNAME)/lib \
                             -name CVS -prune -o \( -type f -o -type l \) -print)))
#
# standard flags
#
CPPFLAGS    += $(SYSFLAGS)
CCFLAGS     += $(SYSFLAGS)
DEBUG_CPP   += -UNDEBUG -DCOS_LOGMSG=COS_LOGMSG_DEBUG -DCOS_CONTRACT=COS_CONTRACT_ALL
DEBUG_CC    += -UNDEBUG -DCOS_LOGMSG=COS_LOGMSG_DEBUG -DCOS_CONTRACT=COS_CONTRACT_ALL
PROFILE_CPP += -DNDEBUG -DCOS_LOGMSG=COS_LOGMSG_INFO  -DCOS_CONTRACT=COS_CONTRACT_PRE
PROFILE_CC  += -DNDEBUG -DCOS_LOGMSG=COS_LOGMSG_INFO  -DCOS_CONTRACT=COS_CONTRACT_PRE
RELEASE_CPP += -DNDEBUG -DCOS_LOGMSG=COS_LOGMSG_WARN  -DCOS_CONTRACT=COS_CONTRACT_PRE
RELEASE_CC  += -DNDEBUG -DCOS_LOGMSG=COS_LOGMSG_WARN  -DCOS_CONTRACT=COS_CONTRACT_PRE

#
# standard goals
#
GOALS := $(if $(MAKECMDGOALS),$(MAKECMDGOALS),$(.DEFAULT_GOAL))

#
# for show/trace/debugging 
#
_ := $(if $(call eq,$(SHOW),yes),,@)

#
# for debugging 
#
ifeq ($(TRACE),yes)
TARGET := [$(TARGETS)]
$(info VERSION = $(VERSION))
$(info RELEASE = $(RELEASE))
$(info PRJTYPE = $(PRJTYPE))
$(info LNKTYPE = $(LNKTYPE))
$(info TARGETS = $(TARGETS))
$(info HEADERS[$(words $(HEADERS))] = $(HEADERS))
$(info GENERIC[$(words $(GENERIC))] = $(GENERIC))
$(info SOURCES[$(words $(SOURCES))] = $(SOURCES))
$(info OBJECTS[$(words $(OBJECTS))] = $(OBJECTS))
$(info DEPENDS[$(words $(DEPENDS))] = $(DEPENDS))
$(info MODINCS[$(words $(MODINCS))] = $(MODINCS))
$(info MODLIBS[$(words $(MODLIBS))] = $(MODLIBS))
$(info INCLUDE[$(words $(INCLUDE))] = $(INCLUDE))
$(info LIBRARY[$(words $(LIBRARY))] = $(LIBRARY))
$(info LIBS   [$(words $(LIBS))] = $(LIBS))
$(info MODS   [$(words $(MODS))] = $(MODS))
$(info CPPFLAGS    = $(CPPFLAGS))
$(info CCFLAGS     = $(CCFLAGS))
$(info LDFLAGS     = $(LDFLAGS))
$(info DEBUG_CPP   = $(DEBUG_CPP))
$(info DEBUG_CC    = $(DEBUG_CC))
$(info PROFILE_CPP = $(PROFILE_CPP))
$(info PROFILE_CC  = $(PROFILE_CC))
$(info RELEASE_CPP = $(RELEASE_CPP))
$(info RELEASE_CC  = $(RELEASE_CC))
endif

# checks
$(call assert, $(LNKTYPE), unable to detect link modes)
$(call assert, $(SOURCES), unable to find source files)

# end of makefile


#
# o---------------------------------------------------------------------o
# |
# | COS makefile -- project
# |
# o---------------------------------------------------------------------o
# |
# | C Object System
# |
# | Copyright (c) 2007+ Laurent Deniau, laurent.deniau@cern.ch
# |
# | For more information, see:
# | http://cern.ch/laurent.deniau/cos.html
# |
# o---------------------------------------------------------------------o
# |
# | This file is part of the C Object System framework.
# |
# | The C Object System is free software; you can redistribute it and/or
# | modify it under the terms of the GNU Lesser General Public License
# | as published by the Free Software Foundation; either version 3 of
# | the License, or (at your option) any later version.
# |
# | The C Object System is distributed in the hope that it will be
# | useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# | of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# |
# | See <http://www.gnu.org/licenses> for more details.
# |
# o---------------------------------------------------------------------o
# |
# | $Id: project,v 1.16 2008/12/20 00:02:38 ldeniau Exp $
# |
#

# checks
$(call assert, $(PRJTYPE), empty project type)
$(call assert, $(LNKTYPE), unable to detect link modes)
$(call assert, $(SOURCES), unable to find source files)

#
# project goals
#
GOALS := $(patsubst install,                        all      ,$(GOALS))
GOALS := $(patsubst tests,                          all      ,$(GOALS))
GOALS := $(patsubst all.clean, $(addsuffix .clean,$(TARGETS)),$(GOALS))
GOALS := $(patsubst all.srun,  $(addsuffix .srun, $(TARGETS)),$(GOALS))
GOALS := $(patsubst all.run,   $(addsuffix .run,  $(TARGETS)),$(GOALS))
GOALS := $(patsubst all,                          $(TARGETS) ,$(GOALS))

GOALS := $(sort $(GOALS))

ifeq ($(TRACE),yes)
$(info GOALS = $(GOALS))
endif

#
# install targets
#
.PHONY: install
.PHONY: install.prn install.dir
.PHONY: install.pre do.install install.post

install: all install.prn install.dir install.pre do.install install.post

install.prn:
	@  echo "*** Installing $($(PRJTYPE))"

do.install: clean base.install dest.install

base.install: \
FILES = $(subst $(BASEDIR)/,, \
        $(shell $(FIND) $(wildcard $(BASEDIR)/bin $(BASEDIR)/share $(BASEDIR)/include) \
                        \( $(INSEXCMD) \) -prune -o \( -type f -o -type l \) -print))

dest.install: \
FILES = $(subst $(DESTDIR)/$(OSNAME)/,, \
        $(shell $(FIND) $(wildcard $(DESTDIR)/$(OSNAME)/bin $(DESTDIR)/$(OSNAME)/lib) \
                        \( $(INSEXCMD) \) -prune -o \( -type f -o -type l \) -print))

install.dir: \
FILES = $(subst $(BASEDIR)/,, $(subst $(DESTDIR)/$(OSNAME)/,, \
        $(shell $(FIND) $(wildcard $(BASEDIR)/bin $(BASEDIR)/share $(BASEDIR)/include \
                                   $(DESTDIR)/$(OSNAME)/bin $(DESTDIR)/$(OSNAME)/lib) \
                        \( $(INSEXCMD) \) -prune -o -type d -print)))

base.install:
	$_ for f in $(FILES) ; do \
	     $(CP) $(BASEDIR)/$$f $(INSTDIR)/$$f ; \
	     echo  $(INSTDIR)/$$f >> $(DESTDIR)/$(INSTALLED) ; \
	   done

dest.install:
	$_ for f in $(FILES) ; do \
	     $(CP) $(DESTDIR)/$(OSNAME)/$$f $(INSTDIR)/$$f ; \
	     echo  $(INSTDIR)/$$f >> $(DESTDIR)/$(INSTALLED) ; \
	   done

install.dir:
	$_ $(MKDIR) $(INSTDIR) \
	   $(call missing,$(sort $(abspath $(addprefix $(INSTDIR)/,$(FILES)))))

#
# uninstall targets
#
.PHONY: uninstall
.PHONY: uninstall.prn uninstall.pre do.uninstall uninstall.post

uninstall: uninstall.prn uninstall.pre do.uninstall uninstall.post

uninstall.prn:
	@  echo "*** Uninstalling $($(PRJTYPE))"

do.uninstall:
	$_ if [ -f $(DESTDIR)/$(INSTALLED) ] ; then \
	     for f in `$(SORT) -u $(DESTDIR)/$(INSTALLED)` ; do \
	       $(RM) $$f ; \
	     done ; \
	     $(RM) $(DESTDIR)/$(INSTALLED) ; \
	   fi

#
# tests targets
#
.PHONY: tests
.PHONY: tests.prn tests.dir
.PHONY: tests.pre do.tests tests.post

tests: all tests.prn tests.dir tests.pre do.tests tests.post

tests.prn:
	@  echo "*** Testing $($(PRJTYPE))"

do.tests:
	$_ cd $(DESTDIR)/tests && $(MAKE) -C $(BASEDIR)/tests $(if $(ARGS),release,debug).run

tests.dir: $(call missing,$(DESTDIR)/tests)

$(DESTDIR)/tests:
	$_ $(MKDIR) $@

#
# project targets
#
.PHONY: all all.run all.srun all.clean

all      :                    $(TARGETS)
all.run  : $(addsuffix .run,  $(TARGETS))
all.srun : $(addsuffix .srun, $(TARGETS))
all.clean: $(addsuffix .clean,$(TARGETS))

# debug target

TARGET    := debug
TARGETEXT := _d

$(TARGET).%: CPPFLAGS += $(DEBUG_CPP)
$(TARGET).%:  CCFLAGS += $(DEBUG_CC)
$(TARGET).%:  LDFLAGS += $(DEBUG_LD)

include $(MAKDIR)/mak/$(PRJTYPE)

# profile target

TARGET    := profile
TARGETEXT := _p

$(TARGET).%: CPPFLAGS += $(PROFILE_CPP)
$(TARGET).%:  CCFLAGS += $(PROFILE_CC)
$(TARGET).%:  LDFLAGS += $(PROFILE_LD)

include $(MAKDIR)/mak/$(PRJTYPE)

# release target

TARGET    := release
TARGETEXT :=

$(TARGET).%: CPPFLAGS += $(RELEASE_CPP)
$(TARGET).%:  CCFLAGS += $(RELEASE_CC)
$(TARGET).%:  LDFLAGS += $(RELEASE_LD)

include $(MAKDIR)/mak/$(PRJTYPE)

# directories target

.PHONY: project.dir

project.dir: $(call missing,$(TMPDIR) $(BINDIR) $(LIBDIR))

$(TMPDIR):
	$_ $(MKDIR) $@

$(BINDIR):
	$_ $(MKDIR) $@

$(LIBDIR):
	$_ $(MKDIR) $@

# end of makefile

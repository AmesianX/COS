#
# o---------------------------------------------------------------------o
# |
# | COS makefile -- common
# |
# o---------------------------------------------------------------------o
# |
# | C Object System
# |
# | Copyright (c) 2007+ Laurent Deniau, laurent.deniau@cern.ch
# |
# | For more information, see:
# | http://cern.ch/laurent.deniau/cos.html
# |
# o---------------------------------------------------------------------o
# |
# | This file is part of the C Object System framework.
# |
# | The C Object System is free software; you can redistribute it and/or
# | modify it under the terms of the GNU Lesser General Public License
# | as published by the Free Software Foundation; either version 3 of
# | the License, or (at your option) any later version.
# |
# | The C Object System is distributed in the hope that it will be
# | useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# | of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# |
# | See <http://www.gnu.org/licenses> for more details.
# |
# o---------------------------------------------------------------------o
# |
# | $Id: common,v 1.11 2009/01/22 16:45:07 ldeniau Exp $
# |
#

#
# build targets
#
.PHONY: all all.prn all.pre all.do all.post
.PHONY: all.run all.srun all.clean all.tests all.install all.uninstall
.PHONY: $(modules)
.PHONY: $(addsuffix .run,       $(modules))
.PHONY: $(addsuffix .srun,      $(modules))
.PHONY: $(addsuffix .clean,     $(modules))
.PHONY: $(addsuffix .tests,     $(modules))
.PHONY: $(addsuffix .install,   $(modules))
.PHONY: $(addsuffix .uninstall, $(modules))

all          : all.prn all.pre all.do all.post
all.run      : $(addsuffix .run,      $(modules)  $(TARGETS))
all.srun     : $(addsuffix .srun,     $(modules)  $(TARGETS))
all.clean    : $(addsuffix .clean,    $(modules)  $(TARGETS))
all.tests    : $(addsuffix .tests,    $(modules)) $(TARGETS)
all.install  : $(addsuffix .install,  $(modules)) $(TARGETS)
all.uninstall: $(addsuffix .uninstall,$(call reverse,$(modules)))

all.prn:
	@echo "*** Making $($(PRJTYPE))"

all.do: $(modules) $(TARGETS)

$(modules):
	$_ [ -d $(DESTDIR)/$@ ] || $(MKDIR)   $(DESTDIR)/$@
	$_   cd $(DESTDIR)/$@   && $(MAKE) -C $(BASEDIR)/$@

$(addsuffix .run, $(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) all.run

$(addsuffix .srun, $(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) all.srun

$(addsuffix .clean, $(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) all.clean

$(addsuffix .tests, $(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) tests

$(addsuffix .install,$(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) install

$(addsuffix .uninstall,$(modules)):
	$_ [ -d $(DESTDIR)/$(basename $@) ] || $(MKDIR)   $(DESTDIR)/$(basename $@)
	$_   cd $(DESTDIR)/$(basename $@)   && $(MAKE) -C $(BASEDIR)/$(basename $@) uninstall

#
# tests
#
.PHONY: tests tests.prn tests.pre tests.do tests.post
.PHONY: dest.tests

tests: tests.prn all.tests tests.pre tests.do tests.post

tests.prn:
	@echo "*** Testing $($(PRJTYPE))"

tests.do: $(if $(wildcard $(BASEDIR)/tests),dest.tests)

dest.tests:
	$_ [ -d $(DESTDIR)/tests ] || $(MKDIR)   $(DESTDIR)/tests
	$_   cd $(DESTDIR)/tests   && $(MAKE) -C $(BASEDIR)/tests debug.run

#
# install
#
.PHONY: install install.prn install.dir install.pre install.do install.post
.PHONY: base.install dest.install dist.install

install: install.prn all.install install.dir install.pre install.do install.post

install.prn:
	@echo "*** Installing $($(PRJTYPE))"

install.do: clean base.install dest.install dist.install

base.install install.dir: \
BASE_FILES = $(subst $(BASEDIR)/,, \
                        $(if $(wildcard $(BASEDIR)/bin $(BASEDIR)/include $(BASEDIR)/share), \
             $(shell $(FIND) $(wildcard $(BASEDIR)/bin $(BASEDIR)/include $(BASEDIR)/share)  \
                        \( $(INSEXCMD) \) -prune -o \( -type f -o -type l \) -print)))

dest.install install.dir: \
DEST_FILES = $(subst $(DESTDIR)/$(OSNAME)/,, \
                        $(if $(wildcard $(DESTDIR)/$(OSNAME)/bin $(DESTDIR)/$(OSNAME)/lib), \
             $(shell $(FIND) $(wildcard $(DESTDIR)/$(OSNAME)/bin $(DESTDIR)/$(OSNAME)/lib)  \
                        \( $(INSEXCMD) \) -prune -o \( -type f -o -type l \) -print)))

dist.install install.dir: \
DIST_FILES = $(subst $(BASEDIR)/,, \
             $(shell $(FIND) $(BASEDIR) -maxdepth 1 \
                        \( $(INSEXCMD) \) -prune -o \( -type f -o -type l \) -print))

base.install:
	$_ for f in $(BASE_FILES) ; do \
	     echo "*** Copying $$f" ; \
	     $(CP) $(BASEDIR)/$$f $(INSTDIR)/$$f ; \
	     echo  $(INSTDIR)/$$f >> $(INSTALLED) ; \
	   done

dest.install:
	$_ for f in $(DEST_FILES) ; do \
	     echo "*** Copying $$f" ; \
	     $(CP) $(DESTDIR)/$(OSNAME)/$$f $(INSTDIR)/$$f ; \
	     echo  $(INSTDIR)/$$f >> $(INSTALLED) ; \
	   done

dist.install:
	$_ for f in $(DIST_FILES) ; do \
	     echo "*** Copying $$f" ; \
	     $(CP) $(BASEDIR)/$$f $(INSTDOC)/$$f ; \
	     echo $(INSTDOC)/$$f >> $(INSTALLED) ; \
	   done

install.dir:
	$_ dirs="$(INSTDOC) $(call missing, \
	     $(sort $(abspath $(dir $(addprefix $(INSTDIR)/, $(BASE_FILES) $(DEST_FILES))))))" ; \
	   for d in $$dirs ; do \
	     if [ ! -d $$d ] ; then \
	       echo "*** Creating $$d" ; \
	       $(MKDIR) $$d ; \
	     fi ; \
	   done

#
# uninstall
#
.PHONY: uninstall uninstall.prn uninstall.pre uninstall.do uninstall.post

uninstall: uninstall.prn uninstall.pre uninstall.do uninstall.post all.uninstall

uninstall.prn:
	@echo "*** Uninstalling $($(PRJTYPE))"

uninstall.do:
	$_ if [ -f $(INSTALLED) ] ; then \
	     files=`$(SORT) -u -r $(INSTALLED)` ; \
	     for f in $$files ; do \
	       echo "*** Removing $$f" ; \
	       $(RM) $$f ; \
	     done ; \
	     $(RM) $(INSTALLED) ; \
	   fi

#
# clean
#
.PHONY: clean cleanbuild cleanall

clean:
	@  echo "*** Cleaning files"
	$_ $(FIND) $(BASEDIR) -type f \( $(CLEANCMD) \) -exec $(RM) {} \;

cleanbuild:
	@  echo "*** Cleaning builds"
	$_ $(RM) `$(FIND) $(DESTDIR) -type d -name $(OSNAME) -print`

cleanall: cleanbuild clean

#
# tarball
#
.PHONY: tarball

tarball: cleanall
	@  echo "*** Making tarball"
	$_ cd $(BASEDIR)/.. ; \
	   $(MKTAR) -f $(PACKAGE).tgz $(TAREXCMD) $(notdir $(BASEDIR))

# end of makefile


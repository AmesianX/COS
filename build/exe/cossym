#!/bin/sh
#
# o---------------------------------------------------------------------o
# |
# | COS symbols
# |
# o---------------------------------------------------------------------o
# |
# | C Object System
# |
# | Copyright (c) 2007+ Laurent Deniau, laurent.deniau@cern.ch
# |
# | For more information, see:
# | http://cern.ch/laurent.deniau/cos.html
# |
# o---------------------------------------------------------------------o
# |
# | This file is part of the C Object System framework.
# |
# | The C Object System is free software; you can redistribute it and/or
# | modify it under the terms of the GNU Lesser General Public License
# | as published by the Free Software Foundation; either version 3 of
# | the License, or (at your option) any later version.
# |
# | The C Object System is distributed in the hope that it will be
# | useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# | of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# |
# | See <http://www.gnu.org/licenses> for more details.
# |
# o---------------------------------------------------------------------o
# |
# | $Id: cossym,v 1.4 2008/10/30 11:11:21 ldeniau Exp $
# |
#

# default settings
progname=`basename $0`
filelist=
rmgen=
rmcls=
rmtrc=
funattr=
funqual=
out="_cossym.c"
datestr=`date`
static='static '
ctor=' __attribute__((constructor))'

# helper
usage() {

cat <<END-OF-TEXT

  $progname extracts COS symbols from object files or libraries
  and outputs a C file which must be compiled/linked with your project.

  Usage:
    $progname <options> files

  Options:
    --help
      This help.

    --auto
      The symbols registration will be automatically done on load (shared lib)

    --in=<file_name>
      Use the content of file_name to specify list of files
      Multiple files can be provided with multiple --in

    --out=<file_name>
      Put the result in file_name
      Default is: $out

    --rmgen=<generic-list>
      Remove all generic in the list
      Remove all methods specializing these generics
      Multiple lists can be provided with multiple --rmgen

    --rmcls=<class-list>
      Remove all classes in the list and their subclasses
      Remove all methods specialized by these classes and subclasses
      Multiple lists can be provided with multiple --rmcls
      It is applied after the rmgen option

    --rmtrc
      Trace removed generics and classes on stderr

    where lists are names separated by '|' (or egrep patterns)
      e.g. --rmcls='True|False|TrueFalse'

END-OF-TEXT

    exit 1
}

# parse arguments
while [ "$1" != "" ] ; do

	val=`expr $1 : '--in=\(.*\)'`
	if [ "$val" != "" ] ; then
		filelist="$filelist `cat $val`";
		shift; continue;
	fi

	val=`expr $1 : '--out=\(.*\)'`
	if [ "$val" != "" ] ; then
		out="$val";
		shift; continue;
	fi

	val=`expr $1 : '--rmgen=\(.*\)'`
	if [ "$val" != "" ] ; then
		rmgen="$rmgen $val";
		shift; continue;
	fi

	val=`expr $1 : '--rmcls=\(.*\)'`
	if [ "$val" != "" ] ; then
		rmcls="$rmcls $val";
		shift; continue;
	fi

	if [ "$1" = "--auto" ] ; then
		funqual="$static"
		funattr="$ctor"
		shift; continue;
	fi

	if [ "$1" = "--rmtrc" ] ; then
		rmtrc="Y"
		shift; continue;
	fi

	if [ "$1" = "--help" -o \
	     "$1" =  "-help" ] ; then
		usage
	fi

	val=`expr $1 : '--\(.*\)'`
	if [ "$val" != "" ] ; then
		echo "Unknown option: $1"
		usage
	fi

	filelist="$filelist $1"
	shift
	
done

token='[A-Za-z_][A-Za-z0-9_]*'

# retrieve symbols
if [ "$filelist" != "" ] ; then
    sym=`nm   -g -P $filelist                |
      	 grep -E -e "^_?cos_[cgm]_$token D " |
   	     cut  -d ' ' -f 1                    |
				 sed  -e 's/^_cos/cos/g'             |
       	 sort -u`
    if [ "$rmcls" != "" ] ; then
		lnk=`nm   -g -P $filelist            |
       	 grep -E -e "^_?cos_l_$token B " |
       	 cut  -d ' ' -f 1                |
				 sed  -e 's/^_cos/cos/g'         |
         sort -u`
    fi
fi

# remove generic patterns
if [ "$rmgen" != "" ] ; then
    for pat in $rmgen; do
#       extract generics
        if [ "$rmtrc" = "Y" ] ; then
            gen=`echo $sym                   |
                 tr   ' ' '\n'               |
                 grep -E -e "^cos_g_($pat)$" |
                 sed  -e 's/^cos_g_//g'`
            rmlst="$rmlst $gen"
        fi
#       remove generic pattern
        sym=`echo $sym                      |
             tr   ' ' '\n'                  |
             grep -E -v -e "^cos_g_($pat)$" |
             grep -E -v -e "^cos_m_($pat)_"`
    done

#   display removed generics
    rmlst=`echo $rmlst`
    if [ "$rmlst" != "" ] ; then
        echo '** Removed generics:' >&2
        echo `echo $rmlst` >&2
        rmlst=
    fi
fi

# remove class patterns and subclasses
if [ "$rmcls" != "" ] ; then
    for pat in $rmcls; do
#       extract classes
        if [ "$rmtrc" = "Y" ] ; then
            cls=`echo $sym                   |
                 tr   ' ' '\n'               |
                 grep -E -e "^cos_c_($pat)$" |
                 sed  -e 's/^cos_c_//g'`
            rmlst="$rmlst $cls"
        fi
#       extract subclasses
        sub=`echo $lnk                               |
             tr   ' ' '\n'                           |
             grep -E -e "^cos_l_($pat)__isSuperOf__" |
             sed  -e "s/^cos_l_${token}__isSuperOf__//g"`
        sublst="$sublst $sub"
# DEBUG echo "sublst:" `echo $sublst` >&2
#       remove link pattern
        lnk=`echo $lnk     |
             tr   ' ' '\n' |
             grep -E -v -e "^cos_l_($pat)__isSuperOf__"`
#       remove class pattern
        sym=`echo $sym                             |
             tr   ' ' '\n'                         |
             grep -E -v -e "^cos_c_(|m|pm)($pat)$" |
             grep -E -v -e "^cos_m_($token)_(|m|pm)($pat)(_|$)"`
    done

#   display removed classes
    rmlst=`echo $rmlst`
    if [ "$rmlst" != "" ] ; then
        echo '** Removed classes:' >&2
        echo `echo $rmlst` >&2
        rmlst=
    fi

#   remove subclasses
    sublst=`echo $sublst`
    while [ "$sublst" != "" ] ; do
#       add subclasses to removed classes
        if [ "$rmtrc" = "Y" ] ; then
            rmlst="$rmlst $sublst"
        fi
#       build subclass pattern
        pat=`echo $sublst |
             sed  -e 's/ /\|/g'`
# DEBUG echo "pat: $pat" >&2
#       extract subclasses
        sub=`echo $lnk                               |
             tr   ' ' '\n'                           |
             grep -E -e "^cos_l_($pat)__isSuperOf__" |
             sed  -e "s/^cos_l_${token}__isSuperOf__//g"`
        sublst="$sub"
# DEBUG echo "sublst:" `echo $sublst` >&2
#       remove link pattern
        lnk=`echo $lnk     |
             tr   ' ' '\n' |
             grep -E -v -e "^cos_l_($pat)__isSuperOf__"`
#       remove subclass pattern
        sym=`echo $sym                             |
             tr   ' ' '\n'                         |
             grep -E -v -e "^cos_c_(|m|pm)($pat)$" |
             grep -E -v -e "^cos_m_($token)_(|m|pm)($pat)(_|$)"`
    done

#   display removed subclasses
    rmlst=`echo $rmlst`
    if [ "$rmlst" != "" ] ; then
        echo '** Removed subclasses:' >&2
        echo `echo $rmlst` >&2
        rmlst=
    fi
fi

##### Start of _cossym.c #####

cat > $out <<END-OF-TEXT
/*
 * -----------------------------
 * COS symbols
 *
 * DO NOT EDIT - DO NOT EDIT - DO NOT EDIT
 * This file was automatically generated by $progname
 * $datestr
 * -----------------------------
 */

END-OF-TEXT

# output extern declarations
for s in $sym; do
    echo "extern struct Object $s;"       >> $out
done
echo                                      >> $out

# output table definition
echo 'static struct Object* symtbl[] = {' >> $out

for s in $sym; do
    echo "  &$s,"                         >> $out
done

cat >> $out <<END-OF-TEXT
  0
};

void cos_symbol_register(struct Object**);

${funqual}void cos_symbol_init(void)${funattr};
${funqual}void cos_symbol_init(void)
{
   cos_symbol_register(symtbl);
}

END-OF-TEXT

##### Enf of _cossym.c #####

# end of script
